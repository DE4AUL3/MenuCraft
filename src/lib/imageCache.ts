'use client';

// –ö—ç—à –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
class ImageCache {
  private cache: Map<string, string> = new Map();
  private maxSize: number = 100; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  
  constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –∏–∑ localStorage –ø—Ä–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    if (typeof window !== 'undefined') {
      try {
        const storedCache = localStorage.getItem('image_cache');
        if (storedCache) {
          const parsedCache = JSON.parse(storedCache);
          Object.entries(parsedCache).forEach(([key, value]) => {
            this.cache.set(key, value as string);
          });
          console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.cache.size} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –∫—ç—à–∞`);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
        this.clearCache();
      }
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ URL
  get(url: string): string | null {
    if (!url) return null;
    return this.cache.get(url) || null;
  }
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ URL –≤ –∫—ç—à
  set(url: string, dataUrl: string): void {
    if (!url || !dataUrl) return;
    
    // –ï—Å–ª–∏ –∫—ç—à –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    if (this.cache.size >= this.maxSize) {
      const firstKey = this.cache.keys().next().value;
      if (firstKey) this.cache.delete(firstKey);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º URL –≤ –∫—ç—à
    this.cache.set(url, dataUrl);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –≤ localStorage
    if (typeof window !== 'undefined') {
      try {
        const cacheObject = Object.fromEntries(this.cache.entries());
        localStorage.setItem('image_cache', JSON.stringify(cacheObject));
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
      }
    }
  }
  
  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
  clearCache(): void {
    this.cache.clear();
    if (typeof window !== 'undefined') {
      localStorage.removeItem('image_cache');
    }
    console.log('üßπ –ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—á–∏—â–µ–Ω');
  }
  
  // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  async preload(url: string): Promise<string | null> {
    if (!url || typeof window === 'undefined') return null;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫—ç—à–µ
    const cachedUrl = this.get(url);
    if (cachedUrl) return cachedUrl;
    
    // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –∫—ç—à–∏—Ä—É–µ–º
    if (url.startsWith('/')) {
      try {
        const response = await fetch(url);
        const blob = await response.blob();
        const reader = new FileReader();
        
        return new Promise((resolve) => {
          reader.onloadend = () => {
            const dataUrl = reader.result as string;
            this.set(url, dataUrl);
            resolve(dataUrl);
          };
          reader.readAsDataURL(blob);
        });
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${url}:`, error);
        return null;
      }
    }
    
    return null;
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞ –≤ –∫–∏–ª–æ–±–∞–π—Ç–∞—Ö
  getSize(): number {
    try {
      if (typeof window === 'undefined') return 0;
      const cacheObject = Object.fromEntries(this.cache.entries());
      const cacheString = JSON.stringify(cacheObject);
      return Math.round(cacheString.length / 1024);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞:', error);
      return 0;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
export const imageCache = new ImageCache();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
export function preloadImages(urls: string[]): Promise<void> {
  const promises = urls.map(url => imageCache.preload(url));
  return Promise.all(promises).then(() => {
    console.log(`üîÑ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${urls.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
  });
}